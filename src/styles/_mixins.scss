@import '/src/styles/variables';

@mixin move-first-element($value) {
	animation: move-top 2.5s linear infinite;

	@keyframes move-top {
		0% {
			top: $value;
		}
		50% {
			top: calc($value - 10px);
		}
		100% {
			top: $value;
		}
	}
}

@mixin move-second-element($value) {
	animation: move-bottom 2.5s linear infinite;

	@keyframes move-bottom {
		0% {
			bottom: $value;
		}
		50% {
			bottom: calc($value - 10px);
		}
		100% {
			bottom: $value;
		}
	}
}

@mixin navigation($type) {
	display: flex;
	@if ($type == 'horizontal') {
		column-gap: 100px;
		margin-right: 100px;
		align-items: center;
	} @else {
		justify-content: center;
		flex-direction: column;
		row-gap: 20px;
	}

	> a {
		text-decoration: none;
		color: $text-color;
		background-image: linear-gradient(
			to right,
			$main-color,
			$main-color 50%,
			$text-color 50%
		);
		background-size: 200% 100%;
		background-position: -100%;
		display: inline-block;
		padding: 5px 0;
		position: relative;
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		transition: all 0.3s ease-in-out;

		&:before {
			content: '';
			background: $main-color;
			display: block;
			position: absolute;
			bottom: -3px;
			left: 0;
			width: 0;
			height: 3px;
			transition: all 0.3s ease-in-out;
		}

		&:hover {
			background-position: 0;

			&::before {
				width: 100%;
			}
		}
	}
}

@mixin border-animation($bg-size) {
	--border-angle: 0turn;
	--main-bg: conic-gradient(
		from var(--border-angle),
		#1a1a1a,
		#1a1a1a 5%,
		#1a1a1a 60%,
		#1a1a1a 95%
	);

	border: solid 2px transparent;
	--gradient-border: conic-gradient(
		from var(--border-angle),
		transparent 50%,
		#f80,
		#f80 99%,
		transparent
	);

	background:
		var(--main-bg) padding-box,
		var(--gradient-border) border-box,
		var(--main-bg) border-box;

	background-position: center center;
	background-size: $bg-size $bg-size;

	animation: bg-spin 10s linear infinite;
	@keyframes bg-spin {
		to {
			--border-angle: 1turn;
		}
	}
}

@property --border-angle {
	syntax: '<angle>';
	inherits: true;
	initial-value: 0turn;
}

@mixin contacts-title($type) {
	position: relative;
	color: $main-color;
	display: inline-flex;
	align-items: center;
	column-gap: 10px;

	&::before {
		content: '';
		display: inline-block;
		width: 40px;
		height: 40px;
		@if ($type == 'form') {
			background: url('/abra-cv/icons/typing.svg');
		} @else {
			background: url('/abra-cv/icons/contacts.svg');
		}

		@media (min-width: 2000px) {
			width: 50px;
			height: 50px;
		}
	}
}

@mixin notification($type) {
	z-index: 5;
	position: fixed;
	top: 120px;
	right: 0;
	padding: 20px 10px;
	background: $bg-dark;
	font-size: $fs13;
	border-top-left-radius: 10px;
	border-bottom-left-radius: 10px;
	display: inline-flex;
	align-items: center;
	column-gap: 10px;
	animation: show-notification 1s ease-in;

	&::before {
		content: '';
		display: inline-block;
		width: 30px;
		height: 30px;
		@if ($type == 'success') {
			background: url('/abra-cv/icons/success.svg');
		} @else {
			background: url('/abra-cv/icons/error-sending.svg');
		}
		animation: icon 0.5s ease-in;
		animation-delay: 1s;
	}

	@keyframes show-notification {
		from {
			opacity: 0;
			transform: translateX(100%);
		}
		to {
			opacity: 1;
			transform: translateX(0%);
		}
	}

	@keyframes icon {
		0% {
			opacity: 0;
			scale: 0.8;
		}
		80% {
			opacity: 0.8;
			scale: 1.2;
		}
		100% {
			opacity: 1;
			scale: 1;
		}
	}
}

@mixin copyright($type) {
	@if ($type == 'absolute') {
		position: absolute;
		bottom: 10px;
		left: 50%;
		transform: translateX(-50%);
		margin-inline: auto;
	}

	display: flex;
	align-items: center;
	column-gap: 5px;
	font-size: $fs11;
	letter-spacing: $l-spacing;

	> p {
		margin-block: 3px 0px;
	}

	> img {
		width: 15px;
		height: 15px;

		@media (min-width: 2000px) {
			width: 20px;
			height: 20px;
		}
	}

	@media (min-width: 2000px) {
		font-size: $fs14;
	}
}

@mixin github-link($width, $height, $size) {
	@if ($size == 'absolute') {
		position: absolute;
		bottom: 5px;
		right: 5px;
	}

	width: $width;
	height: $height;
	> svg {
		width: $width;
		height: $height;
	}

	&:hover {
		> svg rect {
			stroke: $hover-bg;
			fill: $hover-bg;
		}

		> svg path {
			fill: black;
		}
	}
}

@mixin bg-element($width, $height, $type: 'default') {
	position: absolute;
	width: $width;
	height: $height;
	rotate: 45deg;
	z-index: -1;

	background: linear-gradient(
		-45deg,
		$main-color 46%,
		$text-color 49%,
		$text-color 50%,
		$main-color 53%
	);

	background-size: 500% 500%;

	@if ($type == 'default') {
		animation: gradient 15s ease infinite;
	} @else {
		animation: gradient-reverse 15s ease infinite;
	}

	@keyframes gradient {
		0% {
			background-position: 0% 50%;
		}
		50% {
			background-position: 100% 50%;
		}
		100% {
			background-position: 0% 50%;
		}
	}

	@keyframes gradient-reverse {
		0% {
			background-position: 100% 50%;
		}
		50% {
			background-position: 0% 50%;
		}
		100% {
			background-position: 100% 50%;
		}
	}
}

@mixin blink-animation($type: 'default') {
	@keyframes blink-#{$type} {
		0% {
			@include blink-animation-type($type);
			opacity: 1;
		}
		50% {
			opacity: 0.2;
		}
		100% {
			@include blink-animation-type($type, 360deg);
			opacity: 1;
		}
	}

	animation: blink-#{$type} 16s linear infinite;
}

@mixin blink-animation-type($type: 'default', $deg: 0deg) {
	@if $type == 'x' {
		transform: translateX(-50%) rotateY($deg);
	} @else if $type == 'y' {
		transform: translateY(-50%) rotateY($deg);
	} @else {
		transform: rotateY($deg);
	}
}
